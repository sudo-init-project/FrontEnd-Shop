name: Frontend CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_USERNAME: facundo676
  IMAGE_NAME: frontend-shop
  INFRA_REPO: sudo-init-project/Infra-App-K8s
  CI: false  # ← Deshabilitar warnings como errores

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout frontend code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --coverage --passWithNoTests --watchAll=false
      
    - name: Build application
      run: npm run build
      env:
        CI: false  # ← Deshabilitar warnings como errores
        
    - name: Generate tags
      id: meta
      run: |
        SHORT_SHA=${GITHUB_SHA::7}
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "version=${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.short_sha }}
          
    - name: Update infrastructure repository
      run: |
        git config --global user.name "CI Bot"
        git config --global user.email "ci-bot@github.com"
        
        # Determinar ambiente basado en branch/tag
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          ENV="staging"
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          ENV="production"
        else
          ENV="dev"
        fi
        
        echo "🎯 Actualizando ambiente: $ENV"
        
        # Clone infra repo
        git clone https://${{ secrets.INFRA_TOKEN }}@github.com/${{ env.INFRA_REPO }}.git infra
        cd infra
        
        # Update specific environment
        if [ -f "overlays/$ENV/kustomization.yaml" ]; then
          sed -i "s|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:.*|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}|g" overlays/$ENV/kustomization.yaml
        fi
        
        # Update tags file
        if [ -f "tags/frontend-tag.yaml" ]; then
          sed -i "s|newTag:.*|newTag: ${{ steps.meta.outputs.version }}|g" tags/frontend-tag.yaml
        fi
        
        # Commit and push
        git add .
        git commit -m "🚀 Update frontend ($ENV) to ${{ steps.meta.outputs.version }}" || echo "No changes to commit"
        git push
